#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç.
"""

import logging
import platform
import psutil
import os
from datetime import datetime
from aiogram import Router, types
from aiogram.filters import Command

from utils.cmd_executor import CommandExecutor
from utils.system_commands import check_hids_status

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router(name="system_router")

@router.message(Command("system"))
async def cmd_system(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        system_info = {
            "os": platform.system(),
            "release": platform.release(),
            "version": platform.version(),
            "hostname": platform.node()
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ CPU –∏ –ø–∞–º—è—Ç–∏
        try:
            system_info["cpu_usage"] = psutil.cpu_percent(interval=1)
            system_info["memory"] = psutil.virtual_memory()
        except Exception:
            system_info["cpu_usage"] = "–ù/–î"
            system_info["memory"] = None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        system_info["uptime"] = get_uptime()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å HIDS
        hids_status = check_hids_status()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            "üñ• <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
            f"<b>–•–æ—Å—Ç:</b> {system_info['hostname']}\n"
            f"<b>–û–°:</b> {system_info['os']} {system_info['release']}\n"
            f"<b>–í–µ—Ä—Å–∏—è:</b> {system_info['version']}\n"
            f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {system_info['uptime']}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU –∏ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if isinstance(system_info["cpu_usage"], (int, float)):
            response += f"<b>CPU:</b> {system_info['cpu_usage']}%\n"
        else:
            response += "<b>CPU:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        
        if system_info["memory"]:
            response += (
                f"<b>–ü–∞–º—è—Ç—å:</b> {system_info['memory'].percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n"
                f"<b>–í—Å–µ–≥–æ –ø–∞–º—è—Ç–∏:</b> {format_bytes(system_info['memory'].total)}\n"
                f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏:</b> {format_bytes(system_info['memory'].available)}\n\n"
            )
        else:
            response += "<b>–ü–∞–º—è—Ç—å:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
        
        response += f"<b>–°—Ç–∞—Ç—É—Å HIDS:</b> {hids_status}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üìä –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", callback_data="system:network"),
                types.InlineKeyboardButton(text="üìã –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="system:processes")
            ],
            [
                types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system:refresh"),
                types.InlineKeyboardButton(text="üìú –õ–æ–≥–∏", callback_data="system:logs")
            ]
        ])
        
        await message.answer(response, parse_mode="HTML", reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
    except Exception as e:
        error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b> {str(e)}"
        await message.answer(error_msg, parse_mode="HTML")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /system: {e}")

@router.message(Command("services"))
async def cmd_services(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–∞–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    cmd_executor = CommandExecutor()
    
    # –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    services = ["sshd", "firewalld", "iptables", "fail2ban"]
    
    response = "üîç <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n\n"
    
    for service in services:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø–æ–º–æ—â—å—é systemctl –∏–ª–∏ service
            result = cmd_executor.execute_command(f"systemctl is-active {service} 2>/dev/null || service {service} status 2>/dev/null || echo '–Ω–µ –Ω–∞–π–¥–µ–Ω'")
            status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if "active" in result.strip() or "running" in result.strip() else "‚ùå –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            response += f"<b>{service}:</b> {status}\n"
        except Exception as e:
            response += f"<b>{service}:</b> ‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª–∞ iptables
    try:
        iptables_rules = cmd_executor.execute_command("iptables -L -n 2>/dev/null || echo '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ iptables'")
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª
        rule_count = 0
        for line in iptables_rules.splitlines():
            if line.startswith("ACCEPT") or line.startswith("DROP") or line.startswith("REJECT"):
                rule_count += 1
        
        response += f"\n<b>–ü—Ä–∞–≤–∏–ª–∞ iptables:</b> {rule_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª\n"
    except Exception:
        response += f"\n<b>–ü—Ä–∞–≤–∏–ª–∞ iptables:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
    try:
        open_ports = cmd_executor.execute_command("netstat -tuln 2>/dev/null || ss -tuln 2>/dev/null || echo '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'")
        response += "\n<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:</b>\n"
        
        port_count = 0
        for line in open_ports.splitlines():
            if "LISTEN" in line and ":" in line:
                parts = line.split()
                for part in parts:
                    if ":" in part:
                        address = part
                        response += f"‚Ä¢ {address}\n"
                        port_count += 1
                        if port_count >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 10 –ø–æ—Ä—Ç–∞–º–∏
                            break
                if port_count >= 10:
                    break
                            
        if port_count == 0:
            response += "–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤\n"
    except Exception:
        response += "\n<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    
    await message.answer(response, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")

@router.message(Command("logs"))
async def cmd_logs(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –∂—É—Ä–Ω–∞–ª–µ"""
    cmd_executor = CommandExecutor()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    try:
        # –ü—Ä–æ–±—É–µ–º journalctl, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º /var/log/syslog –∏–ª–∏ messages
        journal = cmd_executor.execute_command(
            "journalctl -n 10 --no-pager 2>/dev/null || " +
            "tail -n 10 /var/log/syslog 2>/dev/null || " +
            "tail -n 10 /var/log/messages 2>/dev/null || " +
            "echo '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –ª–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.'"
        )
        
        response = "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ:</b>\n\n<pre>"
        response += journal
        response += "</pre>"
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(response) > 4000:
            response = response[:3900] + "...</pre>\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
    except Exception as e:
        response = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:</b> {str(e)}"
    
    await message.answer(response, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")

@router.message(Command("network"))
async def cmd_network(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    cmd_executor = CommandExecutor()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        netstat = cmd_executor.execute_command(
            "netstat -tunapl 2>/dev/null | grep -v 'TIME_WAIT' | head -20 2>/dev/null || " +
            "ss -tunapl 2>/dev/null | head -20 2>/dev/null || " +
            "echo '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ —É—Ç–∏–ª–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.'"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
        interfaces = cmd_executor.execute_command(
            "ip addr 2>/dev/null || ifconfig 2>/dev/null || echo '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö.'"
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ IP-–∞–¥—Ä–µ—Å–∞ –∏–∑ –≤—ã–≤–æ–¥–∞
        ip_addresses = []
        for line in interfaces.splitlines():
            if "inet " in line:
                parts = line.strip().split()
                # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ "inet"
                for i, part in enumerate(parts):
                    if part == "inet" and i + 1 < len(parts):
                        ip_addresses.append(parts[i + 1])
        
        response = "üåê <b>–°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        
        if ip_addresses:
            response += "<b>IP-–∞–¥—Ä–µ—Å–∞:</b>\n"
            for ip in ip_addresses:
                response += f"‚Ä¢ {ip}\n"
            response += "\n"
        
        response += "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>\n\n<pre>"
        response += netstat
        response += "</pre>"
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(response) > 4000:
            response = response[:3900] + "...</pre>\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
    except Exception as e:
        response = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b> {str(e)}"
    
    await message.answer(response, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö")

@router.callback_query(lambda c: c.data.startswith("system:"))
async def callback_system(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    action = callback.data.split(":", 1)[1]
    
    if action == "refresh":
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É system –∑–∞–Ω–æ–≤–æ
        await cmd_system(callback.message)
    elif action == "network":
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É network
        await cmd_network(callback.message)
    elif action == "logs":
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É logs
        await cmd_logs(callback.message)
    elif action == "processes":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        cmd_executor = CommandExecutor()
        processes = cmd_executor.execute_command("ps aux | head -10")
        
        response = "üìã <b>–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (TOP 10):</b>\n\n<pre>"
        response += processes
        response += "</pre>"
        
        await callback.message.answer(response, parse_mode="HTML")
    
    await callback.answer()

def get_uptime():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        with open("/proc/uptime", "r") as f:
            uptime_seconds = float(f.readline().split()[0])
            
        days, remainder = divmod(uptime_seconds, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        return f"{int(days)}–¥ {int(hours)}—á {int(minutes)}–º {int(seconds)}—Å"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_bytes(size):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    power = 2**10  # 1024
    n = 0
    power_labels = {0: '', 1: 'K', 2: 'M', 3: 'G', 4: 'T'}
    
    while size > power:
        size /= power
        n += 1
    
    return f"{size:.2f} {power_labels[n]}B" 