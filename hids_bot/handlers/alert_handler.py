#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database.db_manager import DatabaseManager
from utils.cmd_executor import CommandExecutor
from utils.ip_validator import IPValidator

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
router = Router(name="alert_router")
logger = logging.getLogger("alert_handler")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π IP-–∞–¥—Ä–µ—Å–æ–≤
ip_states = {}

# –ü–µ—Ä–∏–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ —á–∞—Å–∞—Ö)
DEFAULT_BAN_PERIOD = 24

@router.message(Command("alerts"))
async def cmd_alerts(message: types.Message, db_manager: DatabaseManager):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    alerts = db_manager.get_recent_incidents(limit=10)
    
    if not alerts:
        await message.answer("–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è—Ö.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    response = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
    
    for idx, incident in enumerate(alerts, 1):
        ip = incident[0]
        reason = incident[1]
        alert_time = incident[2]
        is_blocked = bool(incident[3])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å IP (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω/–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
        status = "üî¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "üü¢ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        
        response += f"{idx}. <b>IP:</b> {ip} ({status})\n"
        response += f"   <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        response += f"   <b>–í—Ä–µ–º—è:</b> {alert_time}\n\n"
    
    await message.answer(response, parse_mode="HTML")

@router.message(Command("alert_detail"))
async def cmd_alert_detail(message: types.Message, db_manager: DatabaseManager):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP-–∞–¥—Ä–µ—Å–µ"""
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /alert_detail <IP-–∞–¥—Ä–µ—Å>")
        return
    
    ip = args[1]
    ip_validator = IPValidator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IP
    if not ip_validator.is_valid_ip(ip):
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞: {ip}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ IP
    alerts = db_manager.get_incidents_by_ip(ip)
    
    if not alerts:
        await message.answer(f"–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è IP-–∞–¥—Ä–µ—Å–∞ {ip}.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    response = f"üîç <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP {ip}:</b>\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP
    if ip in ip_states and ip_states[ip].get("blocked", False):
        unblock_time = ip_states[ip].get("unblock_time")
        if unblock_time:
            time_left = unblock_time - datetime.now()
            hours_left = time_left.total_seconds() / 3600
            response += f"üî¥ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            response += f"‚è± <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {hours_left:.1f} —á–∞—Å–æ–≤\n\n"
        else:
            response += f"üî¥ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
    else:
        response += f"üü¢ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    response += "<b>–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
    for idx, alert in enumerate(alerts, 1):
        alert_time = alert.get("timestamp", datetime.now()).strftime("%Y-%m-%d %H:%M:%S")
        reason = alert.get("reason", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
        response += f"{idx}. <b>–í—Ä–µ–º—è:</b> {alert_time}\n"
        response += f"   <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
    
    # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è IP (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    cmd_executor = CommandExecutor()
    geo_info = cmd_executor.execute_command(f"geoiplookup {ip}").strip()
    
    if geo_info and "IP Address not found" not in geo_info:
        response += f"üåê <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b>\n{geo_info}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block:{ip}"),
            types.InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock:{ip}")
        ],
        [
            types.InlineKeyboardButton(text="üîç Whois", callback_data=f"whois:{ip}"),
            types.InlineKeyboardButton(text="üìä –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞", callback_data=f"trace:{ip}")
        ]
    ])
    
    await message.answer(response, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data.startswith("block:"))
async def callback_block_ip(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP-–∞–¥—Ä–µ—Å–∞"""
    ip = callback.data.split(":", 1)[1]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await callback.message.answer(
        f"–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP {ip}?\n"
        f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (0 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏):"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º IP –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(action="block", ip=ip)
    await callback.answer()

@router.callback_query(F.data.startswith("unblock:"))
async def callback_unblock_ip(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP-–∞–¥—Ä–µ—Å–∞"""
    ip = callback.data.split(":", 1)[1]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    cmd_executor = CommandExecutor()
    result = cmd_executor.execute_command(f"sudo iptables -D INPUT -s {ip} -j DROP")
    
    if result.strip():
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ IP {ip}:\n{result}")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å IP
        if ip in ip_states:
            ip_states[ip]["blocked"] = False
            ip_states[ip]["unblock_time"] = None
        
        await callback.message.answer(f"‚úÖ IP-–∞–¥—Ä–µ—Å {ip} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    await callback.answer()

@router.callback_query(F.data.startswith("whois:"))
async def callback_whois_ip(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ whois –¥–ª—è IP-–∞–¥—Ä–µ—Å–∞"""
    ip = callback.data.split(":", 1)[1]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º whois –∑–∞–ø—Ä–æ—Å
    cmd_executor = CommandExecutor()
    result = cmd_executor.execute_command(f"whois {ip}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    if len(result) > 4000:
        result = result[:4000] + "...\n[–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å]"
    
    await callback.message.answer(f"üîç <b>Whois –¥–ª—è {ip}:</b>\n\n<pre>{result}</pre>", parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("trace:"))
async def callback_trace_ip(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–æ IP-–∞–¥—Ä–µ—Å–∞"""
    ip = callback.data.split(":", 1)[1]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    await callback.message.answer(f"‚è≥ –ó–∞–ø—É—â–µ–Ω–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–æ {ip}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
    cmd_executor = CommandExecutor()
    result = cmd_executor.execute_command(f"traceroute -m 15 {ip}")
    
    await callback.message.answer(f"üìä <b>–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–æ {ip}:</b>\n\n<pre>{result}</pre>", parse_mode="HTML")
    await callback.answer()

@router.message(F.text)
async def handle_ban_period(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–∏–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    if not data or "action" not in data or data["action"] != "block":
        return
    
    try:
        hours = int(message.text.strip())
        ip = data["ip"]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        cmd_executor = CommandExecutor()
        result = cmd_executor.execute_command(f"sudo iptables -A INPUT -s {ip} -j DROP")
        
        if result.strip():
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ IP {ip}:\n{result}")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å IP
        unblock_time = None
        if hours > 0:
            unblock_time = datetime.now() + timedelta(hours=hours)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            asyncio.create_task(schedule_unblock(ip, hours))
            
            status_msg = f"–Ω–∞ {hours} —á–∞—Å–æ–≤ (–¥–æ {unblock_time.strftime('%Y-%m-%d %H:%M:%S')})"
        else:
            status_msg = "–Ω–∞–≤—Å–µ–≥–¥–∞"
        
        ip_states[ip] = {
            "blocked": True,
            "unblock_time": unblock_time
        }
        
        await message.answer(f"‚úÖ IP-–∞–¥—Ä–µ—Å {ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {status_msg}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def schedule_unblock(ip, hours):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É IP —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
    try:
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(hours * 3600)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—ë –µ—â—ë –ª–∏ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if ip in ip_states and ip_states[ip].get("blocked", False):
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            cmd_executor = CommandExecutor()
            result = cmd_executor.execute_command(f"sudo iptables -D INPUT -s {ip} -j DROP")
            
            if not result.strip():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å IP
                ip_states[ip]["blocked"] = False
                ip_states[ip]["unblock_time"] = None
                
                logger.info(f"IP {ip} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ {hours} —á–∞—Å–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ IP {ip}: {e}")

async def process_hids_alert(alert_info, bot=None, admin_chat_id=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç HIDS –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram
    
    :param alert_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    if not bot or not admin_chat_id:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω –±–æ—Ç –∏–ª–∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        ip = alert_info.get('ip', 'N/A')
        reason = alert_info.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
        timestamp = alert_info.get('timestamp', datetime.now())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        alert_text = (
            f"üö® <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –í–¢–û–†–ñ–ï–ù–ò–ò!</b>\n\n"
            f"üîπ <b>IP-–∞–¥—Ä–µ—Å:</b> {ip}\n"
            f"üîπ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
            f"üîπ <b>–í—Ä–µ–º—è:</b> {timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–µ—Å–ª–∏ IP –≤–∞–ª–∏–¥–µ–Ω)
        ip_validator = IPValidator()
        if ip_validator.is_valid_ip(ip) and ip != "127.0.0.1" and ip != "0.0.0.0":
            cmd_executor = CommandExecutor()
            geo_info = cmd_executor.execute_command(f"geoiplookup {ip}").strip()
            
            if geo_info and "IP Address not found" not in geo_info:
                alert_text += f"üåê <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b>\n{geo_info}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block:{ip}"),
                types.InlineKeyboardButton(text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"whois:{ip}")
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=admin_chat_id,
            text=alert_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ç–æ—Ä–∂–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: IP={ip}, –ø—Ä–∏—á–∏–Ω–∞={reason}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}") 